generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                       Int                     @id @default(autoincrement())
  email                    String                  @unique
  passwordHash             String
  name                     String
  phone                    String?
  role                     UserRole                @default(CUSTOMER)
  locale                   String                  @default("ko")
  currency                 String                  @default("TRY")
  createdAt                DateTime                @default(now())
  updatedAt                DateTime                @updatedAt
  addresses                Address[]
  auditLogs                AuditLog[]
  createdBanners           Banner[]                @relation("BannerCreator")
  updatedBanners           Banner[]                @relation("BannerUpdater")
  cartItems                CartItem[]
  communityCommentLikes    CommunityCommentLike[]
  communityPosts           CommunityPost[]
  communityPostBookmarks   CommunityPostBookmark[]
  communityPostComments    CommunityPostComment[]
  communityPostLikes       CommunityPostLike[]
  createdEvents            Event[]                 @relation("EventCreator")
  eventParticipations      EventParticipant[]
  notifications            Notification[]
  orders                   Order[]
  productReviews           ProductReview[]
  recipes                  Recipe[]
  recipeLikes              RecipeLike[]
  refreshTokens            RefreshToken[]
  reviewComments           ReviewComment[]
  reviewHelpful            ReviewHelpful[]
  createdShippingProviders ShippingProvider[]      @relation("ShippingProviderCreator")
  updatedShippingProviders ShippingProvider[]      @relation("ShippingProviderUpdater")
  socialAccounts           SocialAccount[]
  createdSettings          SystemSettings[]        @relation("SettingCreator")
  updatedSettings          SystemSettings[]        @relation("SettingUpdater")
  badges                   UserBadge[]
  followers                UserFollow[]            @relation("UserFollower")
  following                UserFollow[]            @relation("UserFollowing")
  preferences              UserPreference?
  wishlistItems            WishlistItem[]
  stockNotifications       StockNotification[]
  createdCoupons           Coupon[]              @relation("CouponCreator")
  couponUsages             CouponUsage[]
}

model WishlistItem {
  id        Int      @id @default(autoincrement())
  userId    Int
  productId Int
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@index([userId], map: "WishlistItem_userId_fkey")
  @@index([productId], map: "WishlistItem_productId_fkey")
}

model SocialAccount {
  id             Int            @id @default(autoincrement())
  provider       SocialProvider
  providerUserId String
  userId         Int
  createdAt      DateTime       @default(now())
  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerUserId])
  @@index([userId], map: "SocialAccount_userId_fkey")
}

model Product {
  id                Int                  @id @default(autoincrement())
  sku               String               @unique
  slug              String               @unique
  baseName          String
  baseDescription   String?
  price             Decimal              @db.Decimal(10, 2)
  currency          String               @default("TRY")
  stock             Int                  @default(0)
  halalCertified    Boolean              @default(false)
  spiceLevel        Int?
  weightGrams       Int?
  imageUrl          String?
  brand             String?
  category          String?
  expiryDate        DateTime?
  metadata          Json?
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @updatedAt
  freshnessStatus   String               @default("FRESH")
  cartItems         CartItem[]
  communityPosts    CommunityPost[]
  orderItems        OrderItem[]
  reviews           ProductReview[]
  translations      ProductTranslation[]
  recipeIngredients RecipeIngredient[]
  recipeProducts    RecipeProduct[]
  images            ProductImage[]
  wishlistItems     WishlistItem[]
  stockNotifications StockNotification[]
}

model ProductTranslation {
  id          Int     @id @default(autoincrement())
  language    String
  name        String
  description String?
  productId   Int
  product     Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, language])
}

model ProductImage {
  id        Int     @id @default(autoincrement())
  productId Int
  url       String
  altText   String?
  order     Int     @default(0)
  isMain    Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId], map: "ProductImage_productId_fkey")
  @@index([productId, order])
}

model CartItem {
  id        Int      @id @default(autoincrement())
  userId    Int
  productId Int
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id])
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@index([productId], map: "CartItem_productId_fkey")
}

model Address {
  id            Int      @id @default(autoincrement())
  userId        Int
  label         String?
  recipientName String
  phone         String
  country       String   @default("TR")
  city          String
  district      String
  street        String
  postalCode    String?
  addressLine2  String?
  isDefault     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders        Order[]

  @@index([userId], map: "Address_userId_fkey")
}

model Order {
  id                Int               @id @default(autoincrement())
  orderNumber       String            @unique @default(uuid())
  userId            Int
  addressId         Int
  status            OrderStatus       @default(PENDING)
  subtotalAmount    Decimal           @db.Decimal(10, 2)
  shippingFee       Decimal           @default(0.00) @db.Decimal(10, 2)
  totalAmount       Decimal           @db.Decimal(10, 2)
  currency          String            @default("TRY")
  couponCode        String?
  couponDiscountAmount Decimal?       @db.Decimal(10, 2)
  notes             String?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  shippingMethod    String            @default("standard")
  trackingCarrier   String?
  trackingNumber    String?
  trackingStatus    String?
  trackingUpdatedAt DateTime?
  address           Address           @relation(fields: [addressId], references: [id])
  user              User              @relation(fields: [userId], references: [id])
  items             OrderItem[]
  payment           Payment?
  shippingTracking  ShippingTracking?
  taxInvoice        TaxInvoice?
  couponUsages      CouponUsage[]

  @@index([addressId], map: "Order_addressId_fkey")
  @@index([userId], map: "Order_userId_fkey")
}

model OrderItem {
  id           Int     @id @default(autoincrement())
  orderId      Int
  productId    Int
  quantity     Int
  unitPrice    Decimal @db.Decimal(10, 2)
  currency     String  @default("TRY")
  productName  String
  productImage String?
  metaSnapshot Json?
  order        Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product      Product @relation(fields: [productId], references: [id])

  @@index([orderId], map: "OrderItem_orderId_fkey")
  @@index([productId], map: "OrderItem_productId_fkey")
}

model Payment {
  id            Int           @id @default(autoincrement())
  orderId       Int           @unique
  provider      String        @default("iyzico")
  status        PaymentStatus @default(PENDING)
  amount        Decimal       @db.Decimal(10, 2)
  currency      String        @default("TRY")
  transactionId String?
  rawResponse   Json?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  order         Order         @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  userId    Int
  token     String   @db.Text
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "RefreshToken_userId_fkey")
}

model WebhookEvent {
  id          Int       @id @default(autoincrement())
  provider    String
  eventType   String
  payload     Json
  status      String    @default("received")
  createdAt   DateTime  @default(now())
  processedAt DateTime?
}

model ProductReview {
  id               Int             @id @default(autoincrement())
  productId        Int
  userId           Int
  rating           Int
  title            String?
  content          String
  imageUrls        Json?
  helpfulCount     Int             @default(0)
  reportCount      Int             @default(0)
  verifiedPurchase Boolean         @default(false)
  moderatorNotes   String?
  moderatedAt      DateTime?
  moderatedBy      Int?
  status           ReviewStatus    @default(PENDING)
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  product          Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
  user             User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments         ReviewComment[]
  helpful          ReviewHelpful[]

  @@unique([productId, userId])
  @@index([userId], map: "ProductReview_userId_fkey")
}

model ReviewHelpful {
  id        Int           @id @default(autoincrement())
  reviewId  Int
  userId    Int
  createdAt DateTime      @default(now())
  review    ProductReview @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([reviewId, userId])
  @@index([userId], map: "ReviewHelpful_userId_fkey")
}

model ReviewComment {
  id        Int             @id @default(autoincrement())
  reviewId  Int
  userId    Int
  parentId  Int?
  content   String
  tags      Json?
  status    CommentStatus   @default(PUBLISHED)
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  parent    ReviewComment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies   ReviewComment[] @relation("CommentReplies")
  review    ProductReview   @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([parentId], map: "ReviewComment_parentId_fkey")
  @@index([reviewId], map: "ReviewComment_reviewId_fkey")
  @@index([userId], map: "ReviewComment_userId_fkey")
}

model Recipe {
  id             Int                @id @default(autoincrement())
  authorId       Int
  title          String
  slug           String             @unique
  description    String?
  content        Json
  mainImageUrl   String?
  difficulty     Difficulty         @default(EASY)
  cookingTime    Int
  servings       Int
  category       String?
  dietaryTags    Json?
  koreanOrigin   Boolean            @default(true)
  turkeyAdapted  Boolean            @default(false)
  viewsCount     Int                @default(0)
  likesCount     Int                @default(0)
  featured       Boolean            @default(false)
  publishedAt    DateTime?
  status         PostStatus         @default(DRAFT)
  seoTitle       String?
  seoDescription String?
  metadata       Json?
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  author         User               @relation(fields: [authorId], references: [id], onDelete: Cascade)
  ingredients    RecipeIngredient[]
  likes          RecipeLike[]
  products       RecipeProduct[]
  steps          RecipeStep[]

  @@index([authorId], map: "Recipe_authorId_fkey")
}

model RecipeStep {
  id          Int     @id @default(autoincrement())
  recipeId    Int
  stepNumber  Int
  title       String?
  description String
  imageUrl    String?
  tips        String?
  duration    Int?
  recipe      Recipe  @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  @@unique([recipeId, stepNumber])
}

model RecipeProduct {
  id        Int     @id @default(autoincrement())
  recipeId  Int
  productId Int
  amount    String?
  essential Boolean @default(true)
  notes     String?
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  recipe    Recipe  @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  @@unique([recipeId, productId])
  @@index([productId], map: "RecipeProduct_productId_fkey")
}

model RecipeIngredient {
  id           Int      @id @default(autoincrement())
  recipeId     Int
  name         String
  quantity     String
  unit         String?
  productId    Int?
  isEssential  Boolean  @default(true)
  alternatives Json?
  order        Int      @default(0)
  product      Product? @relation(fields: [productId], references: [id])
  recipe       Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  @@index([productId], map: "RecipeIngredient_productId_fkey")
  @@index([recipeId], map: "RecipeIngredient_recipeId_fkey")
}

model RecipeLike {
  id        Int      @id @default(autoincrement())
  recipeId  Int
  userId    Int
  createdAt DateTime @default(now())
  recipe    Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([recipeId, userId])
  @@index([userId], map: "RecipeLike_userId_fkey")
}

model Notification {
  id        Int                @id @default(autoincrement())
  userId    Int
  type      NotificationType
  title     String
  message   String
  data      Json?
  status    NotificationStatus @default(UNREAD)
  createdAt DateTime           @default(now())
  readAt    DateTime?
  user      User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, status])
  @@index([createdAt])
}

model UserPreference {
  id                     Int      @id @default(autoincrement())
  userId                 Int      @unique
  emailNotifications     Boolean  @default(true)
  pushNotifications      Boolean  @default(true)
  expiryNotifications    Boolean  @default(true)
  priceDropNotifications Boolean  @default(true)
  recipeNotifications    Boolean  @default(true)
  marketingNotifications Boolean  @default(false)
  notificationDaysBefore Int      @default(3)
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
  user                   User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CommunityPost {
  id             Int                     @id @default(autoincrement())
  authorId       Int
  type           PostType
  title          String
  content        String                  @db.Text
  imageUrl       String?
  tags           Json?
  likesCount     Int                     @default(0)
  commentsCount  Int                     @default(0)
  productId      Int?
  publishedAt    DateTime?
  status         PostStatus              @default(PUBLISHED)
  metadata       Json?
  createdAt      DateTime                @default(now())
  updatedAt      DateTime                @updatedAt
  bookmarksCount Int                     @default(0)
  cookingTime    Int?
  difficulty     Difficulty?
  featured       Boolean                 @default(false)
  images         Json?
  ingredients    Json?
  instructions   Json?
  mentions       Json?
  rating         Int?
  reviewType     String?
  servings       Int?
  viewsCount     Int                     @default(0)
  author         User                    @relation(fields: [authorId], references: [id], onDelete: Cascade)
  product        Product?                @relation(fields: [productId], references: [id])
  bookmarks      CommunityPostBookmark[]
  comments       CommunityPostComment[]
  likes          CommunityPostLike[]

  @@index([type])
  @@index([createdAt])
  @@index([authorId])
  @@index([likesCount])
  @@index([productId], map: "CommunityPost_productId_fkey")
}

model CommunityPostLike {
  id        Int           @id @default(autoincrement())
  postId    Int
  userId    Int
  createdAt DateTime      @default(now())
  post      CommunityPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, userId])
  @@index([userId], map: "CommunityPostLike_userId_fkey")
}

model CommunityPostComment {
  id         Int                    @id @default(autoincrement())
  postId     Int
  userId     Int
  parentId   Int?
  content    String
  createdAt  DateTime               @default(now())
  updatedAt  DateTime               @updatedAt
  likesCount Int                    @default(0)
  mentions   Json?
  status     CommentStatus          @default(PUBLISHED)
  likes      CommunityCommentLike[]
  parent     CommunityPostComment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies    CommunityPostComment[] @relation("CommentReplies")
  post       CommunityPost          @relation(fields: [postId], references: [id], onDelete: Cascade)
  user       User                   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([parentId], map: "CommunityPostComment_parentId_fkey")
  @@index([postId], map: "CommunityPostComment_postId_fkey")
  @@index([userId], map: "CommunityPostComment_userId_fkey")
}

model CommunityPostBookmark {
  id             Int           @id @default(autoincrement())
  postId         Int
  userId         Int
  collectionName String?
  createdAt      DateTime      @default(now())
  post           CommunityPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, userId])
  @@index([userId], map: "CommunityPostBookmark_userId_fkey")
}

model CommunityCommentLike {
  id        Int                  @id @default(autoincrement())
  commentId Int
  userId    Int
  createdAt DateTime             @default(now())
  comment   CommunityPostComment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user      User                 @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([commentId, userId])
  @@index([userId], map: "CommunityCommentLike_userId_fkey")
}

model UserFollow {
  id          Int      @id @default(autoincrement())
  followerId  Int
  followingId Int
  createdAt   DateTime @default(now())
  follower    User     @relation("UserFollower", fields: [followerId], references: [id], onDelete: Cascade)
  following   User     @relation("UserFollowing", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@index([followingId], map: "UserFollow_followingId_fkey")
}

model UserBadge {
  id        Int       @id @default(autoincrement())
  userId    Int
  badgeType BadgeType
  earnedAt  DateTime  @default(now())
  metadata  Json?
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, badgeType])
}

model Event {
  id               Int                @id @default(autoincrement())
  name             String
  description      String             @db.Text
  type             EventType
  status           EventStatus        @default(UPCOMING)
  startDate        DateTime
  endDate          DateTime
  icon             String?
  theme            String?
  bannerUrl        String?
  rules            Json?
  rewards          Json?
  participantCount Int                @default(0)
  maxParticipants  Int?
  createdById      Int
  featured         Boolean            @default(false)
  metadata         Json?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  createdBy        User               @relation("EventCreator", fields: [createdById], references: [id])
  participants     EventParticipant[]

  @@index([status])
  @@index([startDate])
  @@index([endDate])
  @@index([featured])
  @@index([createdById], map: "Event_createdById_fkey")
}

model EventParticipant {
  id          Int       @id @default(autoincrement())
  eventId     Int
  userId      Int
  joinedAt    DateTime  @default(now())
  completed   Boolean   @default(false)
  completedAt DateTime?
  score       Int?
  submission  Json?
  event       Event     @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([eventId, userId])
  @@index([userId], map: "EventParticipant_userId_fkey")
}

model AuditLog {
  id          Int         @id @default(autoincrement())
  userId      Int
  action      AuditAction
  entityType  String
  entityId    String?
  oldValues   Json?
  newValues   Json?
  ipAddress   String?
  userAgent   String?
  description String?
  createdAt   DateTime    @default(now())
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([action])
  @@index([entityType])
  @@index([createdAt])
}

model SystemSettings {
  id          Int         @id @default(autoincrement())
  key         String      @unique
  value       Json
  type        SettingType
  description String?
  isActive    Boolean     @default(true)
  createdBy   Int
  updatedBy   Int?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  creator     User        @relation("SettingCreator", fields: [createdBy], references: [id])
  updater     User?       @relation("SettingUpdater", fields: [updatedBy], references: [id])

  @@index([type])
  @@index([isActive])
  @@index([createdBy], map: "SystemSettings_createdBy_fkey")
  @@index([updatedBy], map: "SystemSettings_updatedBy_fkey")
}

model TaxInvoice {
  id              Int           @id @default(autoincrement())
  orderId         Int           @unique
  invoiceNumber   String        @unique
  status          InvoiceStatus @default(PENDING)
  tckn            String?
  vkn             String?
  taxOffice       String?
  companyName     String?
  companyAddress  String
  customerName    String
  customerAddress String
  subtotalAmount  Decimal       @db.Decimal(10, 2)
  taxAmount       Decimal       @db.Decimal(10, 2)
  totalAmount     Decimal       @db.Decimal(10, 2)
  pdfUrl          String?
  apiResponse     Json?
  errorMessage    String?
  issuedAt        DateTime?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  cancelledAt     DateTime?
  order           Order         @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([status])
  @@index([tckn])
  @@index([vkn])
  @@index([issuedAt])
}

model Banner {
  id             Int            @id @default(autoincrement())
  title          String
  description    String?
  imageUrl       String
  linkUrl        String?
  position       BannerPosition
  status         BannerStatus   @default(DRAFT)
  startDate      DateTime
  endDate        DateTime
  priority       Int            @default(0)
  targetAudience Json?
  deviceType     String?
  viewCount      Int            @default(0)
  clickCount     Int            @default(0)
  locale         String         @default("tr")
  createdBy      Int
  updatedBy      Int?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  creator        User           @relation("BannerCreator", fields: [createdBy], references: [id])
  updater        User?          @relation("BannerUpdater", fields: [updatedBy], references: [id])

  @@index([position])
  @@index([status])
  @@index([startDate])
  @@index([endDate])
  @@index([priority])
  @@index([createdBy], map: "Banner_createdBy_fkey")
  @@index([updatedBy], map: "Banner_updatedBy_fkey")
}

model ShippingProvider {
  id                    Int                    @id @default(autoincrement())
  name                  String
  code                  String                 @unique
  logo                  String?
  website               String?
  status                ShippingProviderStatus @default(ACTIVE)
  apiEndpoint           String?
  apiKey                String?
  apiSecret             String?
  testMode              Boolean                @default(true)
  supportsCOD           Boolean                @default(false)
  supportsTracking      Boolean                @default(true)
  baseRate              Decimal                @db.Decimal(10, 2)
  weightRate            Decimal?               @db.Decimal(10, 2)
  distanceRate          Decimal?               @db.Decimal(10, 2)
  freeShippingThreshold Decimal?               @db.Decimal(10, 2)
  supportedRegions      Json?
  deliveryTimeMin       Int?
  deliveryTimeMax       Int?
  metadata              Json?
  createdBy             Int
  updatedBy             Int?
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  creator               User                   @relation("ShippingProviderCreator", fields: [createdBy], references: [id])
  updater               User?                  @relation("ShippingProviderUpdater", fields: [updatedBy], references: [id])
  shipments             ShippingTracking[]

  @@index([status])
  @@index([code])
  @@index([createdBy], map: "ShippingProvider_createdBy_fkey")
  @@index([updatedBy], map: "ShippingProvider_updatedBy_fkey")
}

model ShippingTracking {
  id                Int              @id @default(autoincrement())
  orderId           Int              @unique
  providerId        Int
  trackingNumber    String
  status            ShippingStatus   @default(PENDING)
  currentLocation   String?
  estimatedDelivery DateTime?
  actualDelivery    DateTime?
  providerResponse  Json?
  lastSyncAt        DateTime?
  events            Json?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  order             Order            @relation(fields: [orderId], references: [id], onDelete: Cascade)
  provider          ShippingProvider @relation(fields: [providerId], references: [id])

  @@index([trackingNumber])
  @@index([status])
  @@index([providerId])
}

model CompanyInfo {
  id           Int      @id @default(autoincrement())
  name         String
  taxNumber    String
  taxOffice    String
  address      String
  phone        String
  email        String
  website      String?
  logo         String?
  mersisNumber String?
  tradeNumber  String?
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

enum UserRole {
  CUSTOMER
  ADMIN
  SUPER_ADMIN
  MODERATOR
  OPERATOR
}

enum SocialProvider {
  GOOGLE
  KAKAO
}

enum OrderStatus {
  PENDING
  AWAITING_PAYMENT
  PAID
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  REQUIRES_ACTION
  SUCCEEDED
  FAILED
  REFUNDED
}

enum ReviewStatus {
  PENDING
  PUBLISHED
  REJECTED
}

enum CommentStatus {
  PUBLISHED
  DELETED
  MODERATED
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

enum PostStatus {
  DRAFT
  PENDING
  PUBLISHED
  REJECTED
}

enum NotificationType {
  EXPIRY_WARNING
  PRICE_DROP
  STOCK_AVAILABLE
  ORDER_UPDATE
  RECIPE_LIKE
  SYSTEM_ANNOUNCEMENT
}

enum NotificationStatus {
  UNREAD
  READ
  DISMISSED
}

enum PostType {
  RECIPE
  REVIEW
  TIP
  QUESTION
}

enum BadgeType {
  COOKING_MASTER
  CULTURE_GUIDE
  FRIENDLY_AMBASSADOR
  LOCAL_EXPERT
  FIRST_POST
  HELPFUL_REVIEWER
  COMMUNITY_VETERAN
}

enum EventType {
  CHALLENGE
  CONTEST
  CELEBRATION
  PROMOTION
}

enum EventStatus {
  UPCOMING
  ACTIVE
  ENDED
  CANCELLED
}

enum AuditAction {
  CREATE
  UPDATE
  DELETE
  LOGIN
  LOGOUT
  EXPORT
  IMPORT
  APPROVE
  REJECT
  REFUND
  CANCEL
}

enum SettingType {
  SHIPPING
  TAX
  PAYMENT
  BANNER
  NOTIFICATION
  SECURITY
  GENERAL
}

enum InvoiceStatus {
  PENDING
  ISSUED
  CANCELLED
  FAILED
}

enum BannerPosition {
  HEADER
  HERO
  SIDEBAR
  FOOTER
  MODAL
  FLOATING
}

enum BannerStatus {
  DRAFT
  ACTIVE
  PAUSED
  EXPIRED
}

enum ShippingProviderStatus {
  ACTIVE
  INACTIVE
  MAINTENANCE
}

enum ShippingStatus {
  PENDING
  PICKED_UP
  IN_TRANSIT
  OUT_FOR_DELIVERY
  DELIVERED
  FAILED
  RETURNED
}

enum CouponType {
  PERCENTAGE
  FIXED_AMOUNT
  FREE_SHIPPING
}

model StockNotification {
  id          Int      @id @default(autoincrement())
  productId   Int
  userId      Int?
  email       String
  productName String
  isActive    Boolean  @default(true)
  notifiedAt  DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user        User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([productId])
  @@index([email])
  @@index([isActive])
  @@index([userId], map: "StockNotification_userId_fkey")
}

model Coupon {
  id               Int               @id @default(autoincrement())
  code             String            @unique
  name             String
  description      String?
  type             CouponType
  value            Decimal           @db.Decimal(10, 2)
  minimumOrderAmount Decimal?        @db.Decimal(10, 2)
  maxDiscountAmount  Decimal?        @db.Decimal(10, 2)
  currency         String            @default("TRY")
  usageLimit       Int?
  usageCount       Int               @default(0)
  userUsageLimit   Int?              @default(1)
  isActive         Boolean           @default(true)
  isPublic         Boolean           @default(false)
  validFrom        DateTime
  validUntil       DateTime
  applicableToProducts Json?
  applicableToCategories Json?
  applicableToBrands   Json?
  excludedProducts     Json?
  excludedCategories   Json?
  excludedBrands       Json?
  firstTimeCustomerOnly Boolean      @default(false)
  metadata         Json?
  createdBy        Int?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  creator          User?             @relation("CouponCreator", fields: [createdBy], references: [id])
  usages           CouponUsage[]

  @@index([code])
  @@index([type])
  @@index([isActive])
  @@index([validFrom])
  @@index([validUntil])
  @@index([isPublic])
  @@index([createdBy], map: "Coupon_createdBy_fkey")
}

model CouponUsage {
  id        Int      @id @default(autoincrement())
  couponId  Int
  userId    Int?
  orderId   Int?
  email     String?
  discountAmount Decimal @db.Decimal(10, 2)
  orderAmount    Decimal @db.Decimal(10, 2)
  createdAt DateTime @default(now())
  coupon    Coupon   @relation(fields: [couponId], references: [id], onDelete: Cascade)
  user      User?    @relation(fields: [userId], references: [id])
  order     Order?   @relation(fields: [orderId], references: [id])

  @@index([couponId])
  @@index([userId])
  @@index([orderId])
  @@index([email])
  @@index([createdAt])
  @@index([userId], map: "CouponUsage_userId_fkey")
  @@index([orderId], map: "CouponUsage_orderId_fkey")
}
