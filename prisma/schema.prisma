generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  CUSTOMER
  ADMIN
}

enum SocialProvider {
  GOOGLE
  KAKAO
}

enum OrderStatus {
  PENDING
  AWAITING_PAYMENT
  PAID
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  REQUIRES_ACTION
  SUCCEEDED
  FAILED
  REFUNDED
}

model User {
  id                    Int                    @id @default(autoincrement())
  email                 String                 @unique
  passwordHash          String
  name                  String
  phone                 String?
  role                  UserRole               @default(CUSTOMER)
  locale                String                 @default("ko")
  currency              String                 @default("TRY")
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  socialAccounts        SocialAccount[]
  cartItems             CartItem[]
  orders                Order[]
  addresses             Address[]
  refreshTokens         RefreshToken[]
  productReviews        ProductReview[]
  reviewComments        ReviewComment[]
  reviewHelpful         ReviewHelpful[]
  recipes               Recipe[]
  recipeLikes           RecipeLike[]
  notifications         Notification[]
  preferences           UserPreference?
  communityPosts        CommunityPost[]
  communityPostLikes    CommunityPostLike[]
  communityPostComments CommunityPostComment[]
  communityPostBookmarks CommunityPostBookmark[]
  communityCommentLikes CommunityCommentLike[]
  following             UserFollow[]       @relation("UserFollowing")
  followers             UserFollow[]       @relation("UserFollower")
  badges                UserBadge[]
}

model SocialAccount {
  id             Int            @id @default(autoincrement())
  provider       SocialProvider
  providerUserId String
  userId         Int
  createdAt      DateTime       @default(now())
  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerUserId])
}

model Product {
  id                Int                  @id @default(autoincrement())
  sku               String               @unique
  slug              String               @unique
  baseName          String
  baseDescription   String?
  price             Decimal              @db.Decimal(10, 2)
  currency          String               @default("TRY")
  stock             Int                  @default(0)
  halalCertified    Boolean              @default(false)
  spiceLevel        Int?
  weightGrams       Int?
  imageUrl          String?
  brand             String?
  category          String?
  expiryDate        DateTime?
  freshnessStatus   String               @default("FRESH")
  metadata          Json?
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @updatedAt
  translations      ProductTranslation[]
  cartItems         CartItem[]
  orderItems        OrderItem[]
  reviews           ProductReview[]
  recipeIngredients RecipeIngredient[]
  recipeProducts    RecipeProduct[]
  communityPosts    CommunityPost[]
}

model ProductTranslation {
  id          Int     @id @default(autoincrement())
  language    String
  name        String
  description String?
  productId   Int
  product     Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, language])
}

model CartItem {
  id        Int      @id @default(autoincrement())
  userId    Int
  productId Int
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id])

  @@unique([userId, productId])
}

model Address {
  id            Int      @id @default(autoincrement())
  userId        Int
  label         String?
  recipientName String
  phone         String
  country       String   @default("TR")
  city          String
  district      String
  street        String
  postalCode    String?
  addressLine2  String?
  isDefault     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders        Order[]
}

model Order {
  id                Int         @id @default(autoincrement())
  orderNumber       String      @unique @default(uuid())
  userId            Int
  addressId         Int
  status            OrderStatus @default(PENDING)
  subtotalAmount    Decimal     @db.Decimal(10, 2)
  shippingFee       Decimal     @default(0) @db.Decimal(10, 2)
  totalAmount       Decimal     @db.Decimal(10, 2)
  currency          String      @default("TRY")
  shippingMethod    String      @default("standard")
  trackingNumber    String?
  trackingCarrier   String?
  trackingStatus    String?
  trackingUpdatedAt DateTime?
  notes             String?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  user              User        @relation(fields: [userId], references: [id])
  address           Address     @relation(fields: [addressId], references: [id])
  items             OrderItem[]
  payment           Payment?
}

model OrderItem {
  id           Int     @id @default(autoincrement())
  orderId      Int
  productId    Int
  quantity     Int
  unitPrice    Decimal @db.Decimal(10, 2)
  currency     String  @default("TRY")
  productName  String
  productImage String?
  metaSnapshot Json?
  order        Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product      Product @relation(fields: [productId], references: [id])
}

model Payment {
  id            Int           @id @default(autoincrement())
  orderId       Int           @unique
  provider      String        @default("iyzico")
  status        PaymentStatus @default(PENDING)
  amount        Decimal       @db.Decimal(10, 2)
  currency      String        @default("TRY")
  transactionId String?
  rawResponse   Json?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  order         Order         @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  userId    Int
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model WebhookEvent {
  id          Int       @id @default(autoincrement())
  provider    String
  eventType   String
  payload     Json
  status      String    @default("received")
  createdAt   DateTime  @default(now())
  processedAt DateTime?
}

model ProductReview {
  id               Int          @id @default(autoincrement())
  productId        Int
  userId           Int
  rating           Int
  title            String?
  content          String
  imageUrls        Json?
  helpfulCount     Int          @default(0)
  reportCount      Int          @default(0)
  verifiedPurchase Boolean      @default(false)
  moderatorNotes   String?
  moderatedAt      DateTime?
  moderatedBy      Int?
  status           ReviewStatus @default(PENDING)
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt

  product  Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
  user     User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments ReviewComment[]
  helpful  ReviewHelpful[]

  @@unique([productId, userId])
}

model ReviewHelpful {
  id        Int      @id @default(autoincrement())
  reviewId  Int
  userId    Int
  createdAt DateTime @default(now())

  review ProductReview @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  user   User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([reviewId, userId])
}

model ReviewComment {
  id        Int           @id @default(autoincrement())
  reviewId  Int
  userId    Int
  parentId  Int?
  content   String
  tags      Json?
  status    CommentStatus @default(PUBLISHED)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  review  ProductReview   @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  user    User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  parent  ReviewComment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies ReviewComment[] @relation("CommentReplies")
}

// 공식 레시피 (관리자가 관리하는 전문 레시피)
model Recipe {
  id             Int        @id @default(autoincrement())
  authorId       Int // 관리자만 작성 가능
  title          String
  slug           String     @unique
  description    String?
  content        Json // 상세 조리법
  mainImageUrl   String?
  difficulty     Difficulty @default(EASY)
  cookingTime    Int // 분 단위
  servings       Int // 인분
  category       String? // 카테고리 (국물요리, 반찬, 메인요리 등)
  dietaryTags    Json? // 할랄, 비건, 매운맛 등
  koreanOrigin   Boolean    @default(true)
  turkeyAdapted  Boolean    @default(false)
  viewsCount     Int        @default(0)
  likesCount     Int        @default(0)
  featured       Boolean    @default(false)
  publishedAt    DateTime?
  status         PostStatus @default(DRAFT)
  seoTitle       String?
  seoDescription String?
  metadata       Json?
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt

  author      User               @relation(fields: [authorId], references: [id], onDelete: Cascade)
  ingredients RecipeIngredient[]
  likes       RecipeLike[]
  steps       RecipeStep[]
  products    RecipeProduct[] // 연관 상품들
}

// 레시피 단계별 조리법
model RecipeStep {
  id          Int     @id @default(autoincrement())
  recipeId    Int
  stepNumber  Int
  title       String?
  description String
  imageUrl    String?
  tips        String?
  duration    Int? // 이 단계 소요시간 (분)

  recipe Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  @@unique([recipeId, stepNumber])
}

// 레시피-상품 연결 (레시피에서 사용되는 상품들)
model RecipeProduct {
  id        Int     @id @default(autoincrement())
  recipeId  Int
  productId Int
  amount    String? // 필요한 양 (예: "200g", "1개")
  essential Boolean @default(true) // 필수 재료 여부
  notes     String? // 대체재료 정보 등

  recipe  Recipe  @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([recipeId, productId])
}

model RecipeIngredient {
  id           Int     @id @default(autoincrement())
  recipeId     Int
  name         String
  quantity     String
  unit         String?
  productId    Int?
  isEssential  Boolean @default(true)
  alternatives Json?
  order        Int     @default(0)

  recipe  Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  product Product? @relation(fields: [productId], references: [id])
}

model RecipeLike {
  id        Int      @id @default(autoincrement())
  recipeId  Int
  userId    Int
  createdAt DateTime @default(now())

  recipe Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([recipeId, userId])
}

enum ReviewStatus {
  PENDING
  PUBLISHED
  REJECTED
}

enum CommentStatus {
  PUBLISHED
  DELETED
  MODERATED
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

enum PostStatus {
  DRAFT
  PENDING
  PUBLISHED
  REJECTED
}

enum NotificationType {
  EXPIRY_WARNING
  PRICE_DROP
  STOCK_AVAILABLE
  ORDER_UPDATE
  RECIPE_LIKE
  SYSTEM_ANNOUNCEMENT
}

enum NotificationStatus {
  UNREAD
  READ
  DISMISSED
}

model Notification {
  id        Int                @id @default(autoincrement())
  userId    Int
  type      NotificationType
  title     String
  message   String
  data      Json?
  status    NotificationStatus @default(UNREAD)
  createdAt DateTime           @default(now())
  readAt    DateTime?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, status])
  @@index([createdAt])
}

model UserPreference {
  id                     Int      @id @default(autoincrement())
  userId                 Int      @unique
  emailNotifications     Boolean  @default(true)
  pushNotifications      Boolean  @default(true)
  expiryNotifications    Boolean  @default(true)
  priceDropNotifications Boolean  @default(true)
  recipeNotifications    Boolean  @default(true)
  marketingNotifications Boolean  @default(false)
  notificationDaysBefore Int      @default(3)
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum PostType {
  RECIPE    // 사용자 레시피 공유
  REVIEW    // 상품/장소/이벤트/미디어 리뷰
  TIP       // 문화 꿀팁 및 생활 지혜
  QUESTION  // Q&A 및 문화 질문
}

model CommunityPost {
  id            Int        @id @default(autoincrement())
  authorId      Int
  type          PostType
  title         String
  content       String     @db.Text

  // 레시피 전용 필드
  difficulty    Difficulty?  // EASY, MEDIUM, HARD
  cookingTime   Int?        // 분 단위
  servings      Int?        // 인분수
  ingredients   Json?       // 재료 정보
  instructions  Json?       // 조리 과정

  // 리뷰 전용 필드
  rating        Int?        // 1-5점
  reviewType    String?     // PRODUCT, PLACE, EVENT, MEDIA

  // 공통 필드
  imageUrl      String?
  images        Json?       // 다중 이미지
  tags          Json?       // 태그 배열
  mentions      Json?       // 멘션된 사용자들

  // 연결 관계
  productId     Int?        // 상품 연결 (리뷰용)

  // 상호작용
  likesCount    Int         @default(0)
  commentsCount Int         @default(0)
  bookmarksCount Int        @default(0)
  viewsCount    Int         @default(0)

  // 메타데이터
  publishedAt   DateTime?
  status        PostStatus  @default(PUBLISHED)
  featured      Boolean     @default(false)
  metadata      Json?

  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  // 관계
  author        User                   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  product       Product?               @relation(fields: [productId], references: [id])
  likes         CommunityPostLike[]
  comments      CommunityPostComment[]
  bookmarks     CommunityPostBookmark[]

  @@index([type])
  @@index([createdAt])
  @@index([authorId])
  @@index([likesCount])
}

model CommunityPostLike {
  id        Int      @id @default(autoincrement())
  postId    Int
  userId    Int
  createdAt DateTime @default(now())

  post CommunityPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  user User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, userId])
}

model CommunityPostComment {
  id           Int               @id @default(autoincrement())
  postId       Int
  userId       Int
  parentId     Int?
  content      String
  likesCount   Int               @default(0)
  mentions     Json?
  status       CommentStatus     @default(PUBLISHED)
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt

  post    CommunityPost          @relation(fields: [postId], references: [id], onDelete: Cascade)
  user    User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  parent  CommunityPostComment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies CommunityPostComment[] @relation("CommentReplies")
  likes   CommunityCommentLike[]
}

// 북마크 시스템
model CommunityPostBookmark {
  id     Int  @id @default(autoincrement())
  postId Int
  userId Int
  collectionName String? // 사용자 정의 컬렉션
  createdAt DateTime @default(now())

  post CommunityPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  user User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, userId])
}

// 댓글 좋아요
model CommunityCommentLike {
  id        Int      @id @default(autoincrement())
  commentId Int
  userId    Int
  createdAt DateTime @default(now())

  comment CommunityPostComment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user    User                 @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([commentId, userId])
}

// 사용자 팔로우 (커뮤니티 활성화용)
model UserFollow {
  id          Int      @id @default(autoincrement())
  followerId  Int      // 팔로우하는 사람
  followingId Int      // 팔로우받는 사람
  createdAt   DateTime @default(now())

  follower  User @relation("UserFollower", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("UserFollowing", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
}

// 배지 시스템
model UserBadge {
  id          Int       @id @default(autoincrement())
  userId      Int
  badgeType   BadgeType
  earnedAt    DateTime  @default(now())
  metadata    Json?     // 배지 획득 관련 추가 정보

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, badgeType])
}

enum BadgeType {
  COOKING_MASTER    // 요리 마스터
  CULTURE_GUIDE     // 문화 가이드
  FRIENDLY_AMBASSADOR // 친화 대사
  LOCAL_EXPERT      // 현지 전문가
  FIRST_POST        // 첫 게시물
  HELPFUL_REVIEWER  // 도움되는 리뷰어
  COMMUNITY_VETERAN // 커뮤니티 베테랑
}
